{
  "scopeName": "source.script",
  "fileTypes": [
    "script",
    "cpdf"
  ],
  "name": "IntarS",
  "patterns": [
    {
      "include": "#preprocessor-rule-enabled"
    },
    {
      "include": "#preprocessor-rule-disabled"
    },
    {
      "include": "#preprocessor-rule-other"
    },
    {
      "include": "#comments"
    },
    {
      "match": "\\b(endif|endwhile|endsub|closet|endfor|lookupEnd|matrixEnd|if|while|sub|ot|foreach|lookupBegin|matrixBegin|if|while|ot|foreach|lookupBegin|matrixBegin)\\b",
      "name": "keyword.control.c"
    },
    {
      "match": "\\b(eq|a|ne|in|FILLED|exists|like|contains|spf|soaFrom|nextEOForHandle|setFetchCond|q|getNV|getEOsQSoa|count|oai|ofk|ioai|rofk|allk|getEOPkValue|getEOQ|getEOQf|m|getEOsQf|system|ss|css|cjs|find|getEOsQ|swcof|singleValueSQL|arraySQL|cat|roai|concat|singleRecordSQL|sql|insrt_eo|updat_eo|delet_eo|ps|psr|invk|fieldOn|fieldOff|prefix|suffix|fieldInvisible|fieldVisible|allFieldsVisible|registerinvisible|newEO|sqlq|newDict|getNVL|newArray|newArrayE|newString|class|sort|rao|arraySQLs|modul|suchexternal|allFieldsOff|allFieldsOn|markError|createButton|duplicateButton|deleteButton|au|ah|dbnr|FILLEDNUM|tableNamed|modulOrEnd|neu|sichern|loeschen|zurueck|show|empty|abbrechen|selObjChanged|aValueChanged|didSetValueForKey|aktualisieren|neuSuchen|refreshDisplay|assert_end|assert_m_end|assert_mf_end)\\b",
      "name": "storage.type.c"
    },
    {
      "match": "(gosub|log|else|logi|continue|continuefor|break|breakfor|return|execute|executeString|autorelease|end|lookup|debug|import|enddebug|diaConfirm|diaAlert|execute_inl|execute_ds)",
      "name": "storage.modifier.c"
    },
    {
      "match": "([\\%])\\w*[^,]\\w*",
      "name": "constant.other.variable.mac-classic.c"
    },
    {
      "match": "([\\$])\\w*[^,]\\w*",
      "name": "constant.other.variable.mac-classic.c"
    },
    {
      "match": "\\bs[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.static.mac-classic.c"
    },
    {
      "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
      "name": "constant.language.c"
    },
    {
      "match": "\\b(pages|newPDF|newPage|newPageQuer|newPageWH|scale|o|f|s|lc|lw|lsn|ub|ue|ls|v|fc|s|l|r|c|sprache|g|enc|rs|rf|efs|ers|rscr|flush|close|wtf|vs|vx|vc|vw|fs|erklaerung|fc255|fcrgb|lang|gh|rl|rf|lcrgb|lc255|b|bf|render|lc#|finalizePDF|gw|vf)\\b",
      "name": "constant.numeric.c"
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.c"
        }
      },
      "end": "\\n",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.c"
        }
      },
      "name": "string.quoted.double.c",
      "patterns": [
        {
          "include": "#string_escaped_char"
        },
        {
          "include": "#string_placeholder"
        }
      ]
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.c"
        }
      },
      "end": "\\n|,",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.c"
        }
      },
      "name": "string.quoted.single.c",
      "patterns": [
        {
          "include": "#string_escaped_char"
        }
      ]
    },
    {
      "begin": "(?x)\n        \t\t^\\s*\\#\\s*(define)\\s+             # define\n        \t\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        \t\t(?:                              # and optionally:\n        \t\t    (\\()                         # an open parenthesis\n        \t\t        (\n        \t\t            \\s* \\g<id> \\s*       # first argument\n        \t\t            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        \t\t            (?:\\.\\.\\.)?          # varargs ellipsis?\n        \t\t        )\n        \t\t    (\\))                         # a close parenthesis\n        \t\t)?\n        \t",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.import.define.c"
        },
        "2": {
          "name": "entity.name.function.preprocessor.c"
        },
        "4": {
          "name": "punctuation.definition.parameters.begin.c"
        },
        "5": {
          "name": "variable.parameter.preprocessor.c"
        },
        "7": {
          "name": "punctuation.separator.parameters.c"
        },
        "8": {
          "name": "punctuation.definition.parameters.end.c"
        }
      },
      "end": "(?=(?://|/\\*))|$",
      "name": "meta.preprocessor.macro.c",
      "patterns": [
        {
          "match": "(?>\\\\\\s*\\n)",
          "name": "punctuation.separator.continuation.c"
        },
        {
          "include": "$base"
        }
      ]
    },
    {
      "begin": "^\\s*#\\s*(error|warning)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.import.error.c"
        }
      },
      "end": "$",
      "name": "meta.preprocessor.diagnostic.c",
      "patterns": [
        {
          "match": "(?>\\\\\\s*\\n)",
          "name": "punctuation.separator.continuation.c"
        }
      ]
    },
    {
      "begin": "^\\s*#\\s*(include|import)\\b\\s+",
      "captures": {
        "1": {
          "name": "keyword.control.import.include.c"
        }
      },
      "end": "(?=(?://|/\\*))|$",
      "name": "meta.preprocessor.c.include",
      "patterns": [
        {
          "match": "(?>\\\\\\s*\\n)",
          "name": "punctuation.separator.continuation.c"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.include.c"
        },
        {
          "begin": "<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.other.lt-gt.include.c"
        }
      ]
    },
    {
      "include": "#pragma-mark"
    },
    {
      "begin": "^\\s*#\\s*(define|sub|endsub|foreach|endfor|defined|elif|else|if|ifdef|endif|ifndef|line|pragma|undef)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.import.c"
        }
      },
      "end": "(?=(?://|/\\*))|$",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "match": "(?>\\\\\\s*\\n)",
          "name": "punctuation.separator.continuation.c"
        }
      ]
    },
    {
      "include": "#block"
    },
    {
      "begin": "(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |  \n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.function.leading.c"
        },
        "3": {
          "name": "entity.name.function.c"
        },
        "4": {
          "name": "punctuation.definition.parameters.c"
        }
      },
      "end": "(?<=\\})|(?=#)|(;)",
      "name": "meta.function.c",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#parens"
        },
        {
          "match": "\\bconst\\b",
          "name": "storage.modifier.c"
        },
        {
          "include": "#block"
        }
      ]
    }
  ],
  "repository": {
    "access": {
      "captures": {
        "1": {
          "name": "punctuation.separator.variable-access.c"
        },
        "2": {
          "name": "variable.other.dot-access.c"
        }
      },
      "match": "(\\.)([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\()"
    },
    "block": {
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.c"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.c"
            }
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#preprocessor-rule-enabled-block"
        },
        {
          "include": "#preprocessor-rule-disabled-block"
        },
        {
          "include": "#preprocessor-rule-other-block"
        },
        {
          "include": "#sizeof"
        },
        {
          "include": "#access"
        },
        {
          "include": "#libc"
        },
        {
          "include": "#c_function_call"
        },
        {
          "captures": {
            "1": {
              "name": "variable.other.c"
            },
            "2": {
              "name": "punctuation.definition.parameters.c"
            }
          },
          "match": "(?x)\n\t\t\t        (?x)\n\t\t\t(?:  \n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()",
          "name": "meta.initialization.c"
        },
        {
          "include": "#block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "c_function_call": {
      "captures": {
        "1": {
          "name": "punctuation.whitespace.function-call.leading.c"
        },
        "2": {
          "name": "support.function.any-method.c"
        },
        "3": {
          "name": "punctuation.definition.parameters.c"
        }
      },
      "match": "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()",
      "name": "meta.function-call.c"
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.c"
            }
          },
          "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          "name": "comment.block.c"
        },
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.c"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.c"
            }
          },
          "name": "comment.block.c"
        },
        {
          "match": "\\*/.*\\n",
          "name": "invalid.illegal.stray-comment-end.c"
        },
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.c"
            }
          },
          "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
          "name": "comment.line.banner.c++"
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.c++"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.c++"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-slash.c++",
              "patterns": [
                {
                  "match": "(?>\\\\\\s*\\n)",
                  "name": "punctuation.separator.continuation.c++"
                }
              ]
            }
          ]
        }
      ]
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "comment": "eat nested preprocessor if(def)s",
      "end": "^\\s*#\\s*endif\\b",
      "patterns": [
        {
          "include": "#disabled"
        },
        {
          "include": "#pragma-mark"
        }
      ]
    },
    "libc": {
      "captures": {
        "1": {
          "name": "punctuation.whitespace.support.function.leading.c"
        },
        "2": {
          "name": "support.function.C99.c"
        }
      },
      "match": "(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b"
    },
    "parens": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.c"
        }
      },
      "name": "meta.parens.c",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "pragma-mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.pragma.c"
        },
        "3": {
          "name": "meta.toc-list.pragma-mark.c"
        }
      },
      "match": "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))",
      "name": "meta.section"
    },
    "preprocessor-rule-disabled": {
      "begin": "^\\s*(#(if)\\s+(0)\\b).*",
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.if.c"
        },
        "3": {
          "name": "constant.numeric.preprocessor.c"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [
        {
          "begin": "^\\s*(#\\s*(else)\\b)",
          "captures": {
            "1": {
              "name": "meta.preprocessor.c"
            },
            "2": {
              "name": "keyword.control.import.else.c"
            }
          },
          "end": "(?=^\\s*#\\s*endif\\b)",
          "patterns": [
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "",
          "end": "(?=^\\s*#\\s*(else|endif)\\b)",
          "name": "comment.block.preprocessor.if-branch",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-block": {
      "begin": "^\\s*(#(if)\\s+(0)\\b).*",
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.if.c"
        },
        "3": {
          "name": "constant.numeric.preprocessor.c"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [
        {
          "begin": "^\\s*(#\\s*(else)\\b)",
          "captures": {
            "1": {
              "name": "meta.preprocessor.c"
            },
            "2": {
              "name": "keyword.control.import.else.c"
            }
          },
          "end": "(?=^\\s*#\\s*endif\\b)",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "begin": "",
          "end": "(?=^\\s*#\\s*(else|endif)\\b)",
          "name": "comment.block.preprocessor.if-branch.in-block",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled": {
      "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.if.c"
        },
        "3": {
          "name": "constant.numeric.preprocessor.c"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [
        {
          "begin": "^\\s*(#\\s*(else)\\b).*",
          "captures": {
            "1": {
              "name": "meta.preprocessor.c"
            },
            "2": {
              "name": "keyword.control.import.else.c"
            }
          },
          "contentName": "comment.block.preprocessor.else-branch",
          "end": "(?=^\\s*#\\s*endif\\b)",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        },
        {
          "begin": "",
          "end": "(?=^\\s*#\\s*(else|endif)\\b)",
          "patterns": [
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-block": {
      "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.if.c"
        },
        "3": {
          "name": "constant.numeric.preprocessor.c"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [
        {
          "begin": "^\\s*(#\\s*(else)\\b).*",
          "captures": {
            "1": {
              "name": "meta.preprocessor.c"
            },
            "2": {
              "name": "keyword.control.import.else.c"
            }
          },
          "contentName": "comment.block.preprocessor.else-branch.in-block",
          "end": "(?=^\\s*#\\s*endif\\b)",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        },
        {
          "begin": "",
          "end": "(?=^\\s*#\\s*(else|endif)\\b)",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-other": {
      "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.c"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-other-block": {
      "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      "captures": {
        "1": {
          "name": "meta.preprocessor.c"
        },
        "2": {
          "name": "keyword.control.import.c"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [
        {
          "include": "#block_innards"
        }
      ]
    }
  }
}
